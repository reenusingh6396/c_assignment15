 #include <stdio.h>
// 1. Write a function to find the greatest number from the given array of any size. (TSRS)
int largest(int a[], int n)
{
    int i;
    int max=a[0];
    for(i=1;i<n;i++)
        if(a[i]>max)
          max=a[i];
    return max;
}

int main()
{
     int n=15;
    int arr[n],i;

    printf("enter size of array");
    scanf("%d",&n);
    printf("enter %d numbers",n);
    for(i=0;i<n;i++)
        scanf("%d",&arr[i]);
    printf("largest number is %d ",largest(arr,n));
    return 0;
}

//2. Write a function to find the smallest number from the given array of any size. (TSRS)

int smallest(int a[],int size)
{
    int i,small=a[0];
    for(i=1;i<size;i++)
        if(a[i]<small)
           small=a[i];
    return small;
}

int main()
{
    int n=10;
    int A[n],i,s;
    printf("enter size of array");
    scanf("%d",&n);
    printf("Enter %d numbers ",n);
    for(i=0;i<n;i++)
        scanf("%d",&A[i]);
    s=smallest( A, n);
    printf("smallest number is %d ",s);
    return 0;
}


//3. Write a function to sort an array of any size. (TSRN)
int sort(int a[],int size)
{
    int i,j,temp;
    for(i=0;i<size;i++)
        for(j=i+1;j<size;j++)
            if(a[i]>a[j])
            {
                temp=a[i];
                a[i]=a[j];
                a[j]=temp;
            }
    printf("sorted array is :\n");
    for(i=0;i<size;i++)
        printf("%d ",a[i]);
}
int main()
{
    int n=10;
    int A[n],i;
    printf("enter size of array");
    scanf("%d",&n);
    printf("Enter %d numbers ",n);
    for(i=0;i<n;i++)
        scanf("%d",&A[i]);
    sort(A,n);
    return 0;
}

/*4. Write a function to rotate an array by n position in d direction. The d is an indicative
value for left or right. (For example, if array of size 5 is [32, 29, 40, 12, 70]; n is 2 and
d is left, then the resulting array after left rotation 2 times is [40, 12, 70, 32, 29] )*/

void rotate(int a[],int size,int n,char d)
{
    int i,j,temp;
    if(d=='l'||d=='L')
    {
    for(i=0;i<n;i++)
        { temp=a[0];
         for(j=0;j<size;j++)
            a[j]=a[j+1];
         a[size-1]=temp;
        }
    for(i=0;i<size;i++)
        printf("%d ",a[i]);

    }
    else if(d=='r'||d=='R')
    {
        for(i=0;i<n;i++)
        {
         temp=a[size-1];
         for(j=size-1;j>0;j--)
            a[j]=a[j-1];
         a[0]=temp;
        }
    for(i=0;i<size;i++)
        printf("%d ",a[i]);
    }
}


int main()
{
    int size=15,n,A[size],i;
    char d;
    printf("enter size of array");
    scanf("%d",&size);
    printf("enter %d numbers",size);
    for(i=0;i<size;i++)
        scanf("%d",&A[i]);
    printf("enter rotation position");
    scanf("%d",&n);
    printf("enter direction l or r for left or right");
    fflush(stdin);
    scanf("%c",&d);
    rotate(A,size,n,d);
    return 0;
}


//5. Write a function to find the first occurrence of adjacent duplicate values in the array. Function has to return the value of the element.

int adj_dup(int a[],int size)
{
    int i;
    for(i=0;i<size;i++)
    {
        if(a[i]==a[i+1])
            return a[i];
    }
}
int main()
{
    int n=15,A[n],i;
    printf("enter size of array\n");
    scanf("%d",&n);
    printf("enter %d numbers",n);
    for(i=0;i<n;i++)
        scanf("%d",&A[i]);
    printf("first occurrence of adjacent duplicate values in the array is = %d",adj_dup(A,n));
    return 0;
}


//6. Write a function in C to read n number of values in an array and display it in reverse order.

void reverse(int a[],int n)
{
    int i,rev[n];
    printf("array is\n");
    for(i=0;i<n;i++)
        printf("%d ",a[i]);
    printf("\nreverse array is :\n");
    for(i=n-1;i>=0;i--)
        printf("%d ",a[i]);
}
int main()
{
    int n=10;
    int a[n],i;
    printf("enter size of array");
    scanf("%d",&n);
    printf("enter %d numbers ",n);
    for(i=0;i<n;i++)
        scanf("%d",&a[i]);
    reverse(a,n);
    return 0;
}


//7. Write a function in C to count a total number of duplicate elements in an array.

int duplicate(int a[],int size)
{
    int i,j,count=0;
    for(i=0;i<size;i++)
        for(j=i+1;j<size;j++)
          if(a[i]==a[j])
              count++;
    return count;
}

int main()
{
    int i,n=10;
    int A[n],c;
    printf("enter size of array");
    scanf("%d",&n);
    printf("enter %d numbers ",n);
    for(i=0;i<n;i++)
        scanf("%d",&A[i]);
    c=duplicate(A,n);
    printf("total number of duplicate elements in an array = %d",c);
    return 0;
}


//8. Write a function in C to print all unique elements in an array

void unique(int a[],int n)
{
    int i,count,j;
    for(i=0;i<n;i++)
    {
        count =0;
        for(j=i+1;j<=n;j++)
            if(a[i]==a[j])
               count++;
        if(count==0)
            printf("%d ",a[i]);
    }
}

int main()
{
    int i,n=15,A[n];
    printf("enter size of array");
    scanf("%d",&n);
    printf("enter %d elements ",n);
    for(i=0;i<n;i++)
        scanf("%d",&A[i]);
    unique(A,n);
    return 0;
}

//9. Write a function in C to merge two arrays of the same size sorted in descending order.

void merge(int a[],int n1,int b[],int n2)
{
    int n=n1+n2;
    int i,j,k,c[n];
    for(k=0;k<n;k++)
    {
        if(a[i]>b[j])
        {
          c[k]=a[i];
          i++;
        }
        else if(b[j]>a[i])
        {
            c[k]=b[j];
            j++;
        }
        else if(i!=n1)
        {
            while(k!=n)
            {
                c[k]=b[j];
                k++;
                j++;
                if(k==n)
                    break;
            }
        }
        else if(j!=n2)
            while(k!=n)
        {
            c[k]=a[i];
            k++;
            i++;
            if(k==n)
                break;
        }
    }
    printf("two array after merge in descending order\n ");
    for(k=0;k<n;k++)
        printf("%d ",c[k]);
}
int main()
{
    int i,n1=15,A[n1],n2=10,B[n2];
    printf("enter size of 1st array");
    scanf("%d",&n1);
    printf("enter %d numbers of 1st array",n1);
    for(i=0;i<n1;i++)
        scanf("%d",&A[i]);
    printf("enter size of 2nd array");
    scanf("%d",&n2);
    printf("enter %d elements of 2nd array",n2);
    for(i=0;i<n2;i++)
        scanf("%d",&B[i]);
    merge(A,n1,B,n2);
    return 0;
}

/10. Write a function in C to count the frequency of each element of an array
void count_freq(int a[],int size)
{
    int i,j,c;
    int frq[100]={0};
    for(i=0;i<size;i++)
     frq[a[i]]++;
    for(i=0;i<100;i++)
        if(frq[i]!=0)
          printf("\nfrequency of %d is %d ",i,frq[i]);
}
int main()
{
    int n=10,a[n],i;
    printf("enter size of array");
    scanf("%d",&n);
    printf("enter %d elements",n);
    for(i=0;i<n;i++)
        scanf("%d",&a[i]);
    count_freq(a,n);
      return 0;
}

